name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  windows:
    runs-on: windows-latest
    steps:
      - uses: textbook/take-action@nodejs
        with:
          node-version: 22
      - run: npm run lint

  nodejs:
    strategy:
      fail-fast: false
      matrix:
        node: [20.18, 20, 22, 24]
    runs-on: ubuntu-latest
    outputs:
      lcov-artifact-id: ${{ steps.upload-lcov.outputs.artifact-id }}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: keepitsecret
          POSTGRES_USER: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: postgres://testdb:keepitsecret@localhost:5432/testdb
      LOG_LEVEL: debug
    steps:
      - uses: textbook/take-action@nodejs
        with:
          node-version: ${{ matrix.node }}
      - uses: textbook/take-action@playwright
      - run: npm run lint
      - run: npm run test:cover
        env:
          FORCE_COLOR: true
      - uses: actions/upload-artifact@v4
        id: upload-lcov
        if: vars.ENABLE_COVERALLS == 'true'
        with:
          name: lcov-${{ matrix.node }}
          path: coverage/lcov.info
          if-no-files-found: error
      - run: npm run migration up
      - run: npm run e2e
      - run: npm run e2e:dev

  coverage:
    runs-on: ubuntu-latest
    needs: [nodejs]
    if: always() && vars.ENABLE_COVERALLS == 'true' && needs.nodejs.outputs.lcov-artifact-id
    environment:
      name: coveralls
      url: https://coveralls.io/github/${{ github.repository }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          curl -L https://coveralls.io/coveralls-linux.tar.gz | tar -xz -C /usr/local/bin
      - uses: actions/download-artifact@v4
        with:
          name: lcov-22
          path: coverage/
      - run: coveralls report coverage/lcov.info
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: keepitsecret
          POSTGRES_USER: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: textbook/take-action@nodejs
        with:
          node-version: 22
      - uses: textbook/take-action@playwright
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          load: true
          push: false
          tags: textbook/starter-kit:v2
      - id: env-file
        run: |
          echo 'DATABASE_URL=postgres://testdb:keepitsecret@localhost:5432/testdb' >> "$ENV_FILE"
          echo 'LOG_LEVEL=debug' >> "$ENV_FILE"
          echo 'PORT=4321' >> "$ENV_FILE"
          echo 'NODE_ENV=docker' >> "$ENV_FILE"
          echo "file=$ENV_FILE" >> "$GITHUB_OUTPUT"
        env:
          ENV_FILE: docker.env
      - id: docker-run
        run: |
          echo "id=$(docker run \
            --detach \
            --env-file ${{ steps.env-file.outputs.file }} \
            --init \
            --network 'host' \
            textbook/starter-kit:v2)" >> $GITHUB_OUTPUT
      - run: npx --yes wait-on --log --timeout 30000 http-get://localhost:4321
      - run: npm run e2e
        env:
          LOG_LEVEL: debug
          PLAYWRIGHT_BASE_URL: http://localhost:4321
      - if: always() && steps.docker-run.outputs.id
        run: docker logs ${{ steps.docker-run.outputs.id }}
